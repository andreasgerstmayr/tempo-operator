apiVersion: tempo.grafana.com/v1alpha1   # APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
kind: TempoMonolithic                    # Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
metadata:
  name: example
spec:                                    # TempoMonolithicSpec defines the desired state of TempoMonolithic.
  extraConfig:                           # ExtraConfig defines any extra (overlay) configuration for components
    tempo: {}                            # Tempo defines any extra Tempo configuration, which will be merged with the operator's generated Tempo configuration
  ingestion:                             # Ingestion defines the trace ingestion configuration
    otlp:                                # OTLP defines the ingestion configuration for OTLP
      grpc:                              # GRPC defines the OTLP/gRPC configuration
        enabled: true                    # Enabled defines if OTLP over gRPC is enabled
        tls:                             # TLS defines the TLS configuration for OTLP/gRPC ingestion
          caName: ""                     # caName is the name of a ConfigMap containing a CA certificate (service-ca.crt). It needs to be in the same namespace as the Tempo custom resource.
          certName: ""                   # certName is the name of a Secret containing a certificate (tls.crt) and private key (tls.key). It needs to be in the same namespace as the Tempo custom resource.
          enabled: false                 # enabled defines if TLS is enabled.
          minVersion: ""                 # minVersion defines the minimum acceptable TLS version.
      http:                              # HTTP defines the OTLP/HTTP configuration
        enabled: true                    # Enabled defines if OTLP over HTTP is enabled
        tls:                             # TLS defines the TLS configuration for OTLP/HTTP ingestion
          caName: ""                     # caName is the name of a ConfigMap containing a CA certificate (service-ca.crt). It needs to be in the same namespace as the Tempo custom resource.
          certName: ""                   # certName is the name of a Secret containing a certificate (tls.crt) and private key (tls.key). It needs to be in the same namespace as the Tempo custom resource.
          enabled: false                 # enabled defines if TLS is enabled.
          minVersion: ""                 # minVersion defines the minimum acceptable TLS version.
  jaegerui:                              # JaegerUI defines the Jaeger UI configuration
    enabled: false                       # Enabled defines if the Jaeger UI should be enabled
    ingress:                             # Ingress defines the ingress configuration for Jaeger UI
      annotations:                       # Annotations defines the annotations of the Ingress object.
        "key": ""
      enabled: false                     # Enabled defines if an Ingress object should be created for Jaeger UI
      host: ""                           # Host defines the hostname of the Ingress object.
      ingressClassName: ""               # IngressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource.
    resources:                           # Resources defines the compute resource requirements of Jaeger UI.
      claims:                            # Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers.
      - name: ""                         # Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
      limits:                            # Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        "key": 1Gi
      requests:                          # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        "key": 1Gi
    route:                               # Route defines the route configuration for Jaeger UI
      annotations:                       # Annotations defines the annotations of the Route object.
        "key": ""
      enabled: false                     # Enabled defines if a Route object should be created for Jaeger UI
      host: ""                           # Host defines the hostname of the Route object.
      termination: "edge"                # Termination specifies the termination type. Default: edge.
  management: ""                         # ManagementState defines whether this instance is managed by the operator or self-managed
  resources:                             # Resources defines the compute resource requirements of Tempo.
    claims:                              # Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers.
    - name: ""                           # Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    limits:                              # Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
      "key": 1Gi
    requests:                            # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
      "key": 1Gi
  storage:                               # Storage defines the backend storage configuration
    traces:                              # Traces defines the backend storage configuration for traces
      azure:                             # Azure defines the Azure Storage configuration
        secret: ""                       # secret is the name of a Secret containing credentials for accessing object storage. It needs to be in the same namespace as the Tempo custom resource.
      backend: "memory"                  # Backend defines the backend for storing traces. Default: memory
      gcs:                               # GCP defines the Google Cloud Storage configuration
        secret: ""                       # secret is the name of a Secret containing credentials for accessing object storage. It needs to be in the same namespace as the Tempo custom resource.
      s3:                                # S3 defines the AWS S3 configuration
        secret: ""                       # secret is the name of a Secret containing credentials for accessing object storage. It needs to be in the same namespace as the Tempo custom resource.
        tls:                             # tls defines the TLS configuration for AWS S3.
          caName: ""                     # caName is the name of a ConfigMap containing a CA certificate (service-ca.crt). It needs to be in the same namespace as the Tempo custom resource.
          certName: ""                   # certName is the name of a Secret containing a certificate (tls.crt) and private key (tls.key). It needs to be in the same namespace as the Tempo custom resource.
          enabled: false                 # enabled defines if TLS is enabled.
          minVersion: ""                 # minVersion defines the minimum acceptable TLS version.
      size: "10Gi"                       # Size defines the size of the volume where traces are stored. For in-memory storage, this defines the size of the tmpfs volume. For persistent volume storage, this defines the size of the persistent volume. For object storage, this defines the size of the persistent volume containing the Write-Ahead Log (WAL) of Tempo. Defaults to 10Gi.
status:                                  # TempoMonolithicStatus defines the observed state of TempoMonolithic.
